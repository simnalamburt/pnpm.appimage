name: Release watchtower

on:
  push:
  schedule:
    - cron: '0 */1 * * *'

jobs:
  prepare:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.latest_remote_tag.outputs.ver }}
      need_build: ${{ steps.check.outputs.exists == 'false' }}
      upload_url: ${{ steps.new_release.outputs.upload_url }}
    steps:
      - name: Get latest tag
        id: latest_remote_tag
        run: |
          VERSION=$(
            curl -sL 'https://registry.npmjs.org/pnpm/latest' |
            jq --raw-output '.version' |
            grep -Eo '[0-9]+.[0-9]+.[0-9]+')
          echo "::set-output name=ver::${VERSION}"
      - name: Check if the tag already exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: check
        with:
          tag: v${{ steps.latest_remote_tag.outputs.ver }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish new release
        if: steps.check.outputs.exists == 'false'
        id: new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.latest_remote_tag.outputs.ver }}
          release_name: v${{ steps.latest_remote_tag.outputs.ver }}
          body: |
            This build is automated via GitHub Actions.
            If you find any errors, please open an issue and let me know.

            > Outputs will be available later because we're building AppImage sequentially by arch after publishing the release.
          draft: false
          prerelease: false

  build:
    runs-on: ubuntu-20.04
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        arch: ['x86_64', 'aarch64']
    if: needs.prepare.outputs.need_build == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          sudo apt-get install fuse -y --no-install-recommends
          ./build '${{ needs.prepare.outputs.version }}' '${{ matrix.arch }}'
      - name: Set filename
        id: filename
        run: echo '::set-output name=value::pnpm-${{ matrix.arch }}.AppImage'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./${{ steps.filename.outputs.value }}
          asset_name: ${{ steps.filename.outputs.value }}
          asset_content_type: application/zip
